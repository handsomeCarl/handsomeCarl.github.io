<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用gitlab+fastlane进行自动化构建]]></title>
    <url>%2F2019%2F04%2F28%2Fmy-hello-world%2F</url>
    <content type="text"><![CDATA[持续集成优点：1、缩减开发周期，快速迭代版本 2、提供分发效率，测试人员以及相关人员无需等待开发人员打包 3、减少重复操作，高效打包，减轻开发人员工作量。 4 . 将代码推送到新的分支，CI 服务器就会为您运行测试。 如果 job 都是绿色 的，你的代码是 OK 的。 5 . 如果给定分支中的所有测试都是绿色的，则可以让 CI 服务器自动将代码部署到生产环境中。 这就是所谓的连续部署(Continuous Deployment) 。 6 . 减少 code review 时间 搭建方法运行环境要求 gitlab gitlabrunner fastlane 钉钉机器人 搭建步骤1. 安装 gitlab runner Install GitLab Runner on macOS（我的是 mac 环境所以选择的 Install GitLab Runner on macOS）*1.Download the binary for your system 1sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64 2.Give it permissions to execute: 1sudo chmod +x /usr/local/bin/gitlab-runner 2. 注册 gitlab runner To register a Runner under macOS:*1. Run the following command: 1gitlab-runner register 2Enter your GitLab instance URL: （你 gitlab 的地址） 12Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )https://gitlab.com Enter the token you obtained to register the Runner:（CI/CD 中项目的 token） 12Please enter the gitlab-ci token for this runnerxxx Enter a description for the Runner, you can change this later in GitLab’s UI: 12Please enter the gitlab-ci description for this runner[hostame] my-runner Enter the tags associated with the Runner, you can change this later in GitLab’s UI: 12Please enter the gitlab-ci tags for this runner (comma separated):my-tag,another-tag 6 Enter the Runner executor: 12Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:shel 3. 编写 yml 文件配置项目的 yml 文件进行相应的 job 操作校验 yml 文件是否正确本地调试 yml 文件安装 jq 这个输出报告的时候用 1brew install jq 下面是我的 yml 文件仅供参考 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//构建阶段stages:- build- buildAndUpload- failure//构建前配置before_script:- export LANG=en_US.UTF-8- export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120# build for branch test build and upload to pgyer.job1://注册 runner tag名 可以多个tags:- wangweitagsstage: buildAndUploadscript:# - sh ./Shell/dingtalk.sh &quot;新版本&quot; &quot;# 构建新版本（justademo）&quot;- echo $(pwd)- echo &quot;build job1&quot;- pod install- git reset --hard// fastlane 自动化构建- fastlane dev// 输出相关的git commit等相关信息- export pgyerDes=`git log -10 --oneline | cut -d &quot; &quot; -f2- | grep -E &apos;^\[.*|.*finish$&apos;`- echo $&#123;pgyerDes&#125;- echo $(pwd)- echo $(ls)- export result=$(curl -# -F &quot;file=@../product/LZMDYW.ipa&quot; -F &quot;_api_key=2c34b4faa9e0559667c828f415f7ebee&quot; -F &quot;userKey=1ce44e894fbe779bbf23e75d12c482d8&quot; -F &quot;buildUpdateDescription=$&#123;pgyerDes&#125;&quot; https://www.pgyer.com/apiv2/app/upload)- echo $&#123;result&#125; | jq- export buildKey=`echo $&#123;result&#125; | jq &apos;. | .data.buildKey&apos; | awk -F &apos;&quot;&apos; &apos;&#123;print $2&#125;&apos;`buildQRCodeURL=`echo $&#123;result&#125; | jq &apos;. | .data.buildQRCodeURL&apos; | awk -F &apos;&quot;&apos; &apos;&#123;print $2&#125;&apos;`buildVersion=`echo $&#123;result&#125; | jq &apos;. | .data.buildVersion+&quot;(&quot;+.data.buildBuildVersion+&quot;)&quot;&apos; | awk -F &apos;&quot;&apos; &apos;&#123;print $2&#125;&apos;`buildUpdated=`echo $&#123;result&#125; | jq &apos;. | .data.buildUpdated&apos; | awk -F &apos;&quot;&apos; &apos;&#123;print $2&#125;&apos;`change_log=`git log -20 --oneline | cut -d &quot; &quot; -f2- | grep -E &apos;^\[.*|.*finish$&apos; | awk &apos;&#123;&#123;printf&quot;##### %s; \n&quot;,$0&#125;&#125;&apos;`- export text=&quot;### 版本&quot;$&#123;buildVersion&#125;&quot; \n &gt; 更新记录 \n\n &gt; &quot;$&#123;change_log&#125;&quot; \n\n &gt; ![screenshot](&quot;$&#123;buildQRCodeURL&#125;&quot;)\n##### [下载链接](https://www.pgyer.com/&quot;$&#123;buildKey&#125;&quot;)\n\n###### 上传日期:&quot;$&#123;buildUpdated&#125;&quot;&quot;//钉钉脚本- sh ./Shell/dingtalk.sh &quot;新版本&quot; &quot;$text&quot;only:- /^test.*$/# build for branch only build.job2:tags:- wangweitagsstage: buildscript:# - sh ./Shell/dingtalk.sh &quot;新版本&quot; &quot;# 构建新版本（justademo）&quot;- echo $(pwd)- echo &quot;build job2&quot;- pod install- git reset --hard//fastlen 构建- fastlane CI_devonly:- dev- master# notify when a build has erroredbuild_failure_job:tags:- wangweitagsstage: failurescript:// 丁丁脚本- sh ../Shell/dingtalk.sh &quot;新版本&quot; &quot;# 构建失败（LZMDYW）&quot;when: on_failure 4. fastlane 构建https://docs.fastlane.tools/getting-started/ios/setup/ （1）安装 xcode 命令行工具 xcode-select –install，如果没有安装，会弹出对话框，点击安装。如果提示 xcode-select: error: command line tools are already installed, use “Software Update” to install updates 表示已经安装 #####（2） 安装 Fastlanesudo gem install fastlane -NV 或是 brew cask install fastlane 我这里使用 gem 安装的安装完了执行 fastlane –version，确认下是否安装完成和当前使用的版本号。 （3）初始化 Fastlanecd 到你的项目目录执行fastlane init （4）打包到蒲公英1fastlane add_plugin pgyer 自己的 fastlane 脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051default_platform(:ios)platform :ios dodesc &quot;Description of what the lane does&quot;lane :dev dosigh(force: true,username: &quot;开发者账号&quot;,app_identifier: &quot;bundleid&quot;,output_path: &apos;.ipa包输出路径&apos;,adhoc: true （是否adhoc）)build_app(workspace: &quot;XXXX.xcworkspace&quot;,configuration: &quot;Debug&quot;, （scheme配置）scheme: &quot;XXXX&quot;,export_method: &quot;ad-hoc&quot;,output_directory:&quot;.ipa包输出路径&quot;,include_bitcode:true,)// 打包到蒲公英pgyer(api_key: &quot;&quot;,user_key: &quot;&quot;,update_description: &quot;scheme is dev, update by fastlane&quot;)endlane :CI_dev dosigh(force: true,username: &quot;开发者账号&quot;,app_identifier: &quot;bundleid&quot;,output_path: &apos;.ipa包输出路径&apos;,adhoc: true （是否adhoc）)build_app(workspace: &quot;XXXX.xcworkspace&quot;,configuration: &quot;Debug&quot;, （scheme配置）scheme: &quot;XXXX&quot;,export_method: &quot;ad-hoc&quot;,output_directory:&quot;.ipa包输出路径&quot;,include_bitcode:true,)endend 5.钉钉通知12345678910111213#! bin/bashecho $2curl &apos; 放自己注册的钉钉机器人的token&apos; \-H &quot;Content-Type:application/json&quot; \-d &quot;&#123; \markdown:&#123; \title:&apos;$1&apos;, \text:&apos;$2&apos; \&#125;, \msgtype:&apos;markdown&apos; \&#125;&quot; 6 fastlane 构建注意事项（三天两头的加测试机，手动更新配置文件更新实在是太麻烦了，要不老是提示双重认证）refer：https://blog.csdn.net/weixin_34293911/article/details/87011860 fastlane iOS 双重认证 更新配置文件这个时候就用到这个，他可以自动管理配置开发者等信息https://github.com/fastlane/fastlane/tree/master/spaceship 访问 AppleId 管理站 找到 安全 - App 专用密码，生成一个专用密码 配置环境变量 vim ~/.bash_profile export 1FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=YOUR_PSD 执行 fastlane spaceauth -u abcd@qq.com 按提示获取 session 信息。 复制 session 信息（很长一大段） 配置环境变量 vim ~/.bash_profile 1export FASTLANE_SESSION=&apos;YOUR SESSION&apos;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
